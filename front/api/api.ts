// tslint:disable
/**
 * Stravaganza
 * API for Stravaganza website
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: remy.huet@etu.utc.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from './configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError
} from './base'

/**
 *
 * @export
 * @interface Concert
 */
export interface Concert {
  /**
   *
   * @type {number}
   * @memberof Concert
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof Concert
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof Concert
   */
  date?: string
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {number}
   * @memberof User
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof User
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  email: string
}

/**
 * StravaganzaApi - axios parameter creator
 * @export
 */
export const StravaganzaApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     * Get current authenticated user
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUser(options: any = {}): RequestArgs {
      const localVarPath = `/users/me`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * List all concerts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConcerts(options: any = {}): RequestArgs {
      const localVarPath = `/concerts`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * List all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(options: any = {}): RequestArgs {
      const localVarPath = `/users`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * StravaganzaApi - functional programming interface
 * @export
 */
export const StravaganzaApiFp = function(configuration?: Configuration) {
  return {
    /**
     * Get current authenticated user
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUser(
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
      const localVarAxiosArgs = StravaganzaApiAxiosParamCreator(
        configuration
      ).getCurrentUser(options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * List all concerts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConcerts(
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<Array<Concert>> {
      const localVarAxiosArgs = StravaganzaApiAxiosParamCreator(
        configuration
      ).listConcerts(options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * List all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>> {
      const localVarAxiosArgs = StravaganzaApiAxiosParamCreator(
        configuration
      ).listUsers(options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        }
        return axios.request(axiosRequestArgs)
      }
    }
  }
}

/**
 * StravaganzaApi - factory interface
 * @export
 */
export const StravaganzaApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * Get current authenticated user
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUser(options?: any): AxiosPromise<User> {
      return StravaganzaApiFp(configuration).getCurrentUser(options)(
        axios,
        basePath
      )
    },
    /**
     * List all concerts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConcerts(options?: any): AxiosPromise<Array<Concert>> {
      return StravaganzaApiFp(configuration).listConcerts(options)(
        axios,
        basePath
      )
    },
    /**
     * List all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(options?: any): AxiosPromise<Array<User>> {
      return StravaganzaApiFp(configuration).listUsers(options)(axios, basePath)
    }
  }
}

/**
 * StravaganzaApi - object-oriented interface
 * @export
 * @class StravaganzaApi
 * @extends {BaseAPI}
 */
export class StravaganzaApi extends BaseAPI {
  /**
   * Get current authenticated user
   * @summary Your GET endpoint
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StravaganzaApi
   */
  public getCurrentUser(options?: any) {
    return StravaganzaApiFp(this.configuration).getCurrentUser(options)(
      this.axios,
      this.basePath
    )
  }

  /**
   * List all concerts
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StravaganzaApi
   */
  public listConcerts(options?: any) {
    return StravaganzaApiFp(this.configuration).listConcerts(options)(
      this.axios,
      this.basePath
    )
  }

  /**
   * List all users
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StravaganzaApi
   */
  public listUsers(options?: any) {
    return StravaganzaApiFp(this.configuration).listUsers(options)(
      this.axios,
      this.basePath
    )
  }
}
